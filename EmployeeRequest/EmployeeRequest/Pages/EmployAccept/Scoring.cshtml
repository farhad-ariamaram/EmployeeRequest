@page
@model EmployAccept.ScoringModel
@using Utilities;

@{
    ViewData["Title"] = "نمره دهی";
}

<h4>نمره دهی</h4>

<table class="table table-striped table-responsive">
    <thead>
        <tr>
            <th>
                نام و نام خانوادگی
            </th>
            <th>
                نمره ثبت شده
            </th>
            <th>
                حداکثر نمره مجاز
            </th>
            <th>
                وضعیت تایید/رد
            </th>
            <th>
                تاریخ ثبت نمره
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.TblEmployeeRequestInterviewSession)
        {
            <tr>
                <td>
                    @Model.TblEmployeeRequestPrimaryInformation.Where(a => a.FldEmployeeRequestEmployeeId == item.FldEmployeeRequestEmployeeId).FirstOrDefault().FldEmployeeRequestPrimaryInformationFirstName &nbsp; @Model.TblEmployeeRequestPrimaryInformation.Where(a => a.FldEmployeeRequestEmployeeId == item.FldEmployeeRequestEmployeeId).FirstOrDefault().FldEmployeeRequestPrimaryInformationLastName
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FldEmployeeRequestInterviewSessionResultPoint)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FldEmployeeRequestInterviewSessionMaxPoint)
                </td>
                <td>
                    @if (item.FldEmployeeRequestPrimaryAcceptionId == 1 || item.FldEmployeeRequestPrimaryAcceptionId == null)
                    {
                        <span class="badge badge-warning text-white">مشخص نشده</span>
                    }
                    else if (item.FldEmployeeRequestPrimaryAcceptionId == 2)
                    {
                        <span class="badge badge-danger">رد شده</span>
                    }
                    else
                    {
                        <span class="badge badge-success">تایید شده</span>
                    }
                </td>
                <td>
                    @item.FldEmployeeRequestInterviewSessionDate.toPersianDate()
                </td>
                <td>
                    @if (item.FldEmployeeRequestInterviewSessionDate == null)
                    {
                        <a href="#" class="btn btn-primary w-100" onclick="AskPoint(@item.FldEmployeeRequestInterviewSessionId,@item.FldEmployeeRequestInterviewSessionMaxPoint,'@item.FldEmployeeRequestEmployeeId');">ثبت نمره</a>
                    }

                    @if (item.FldEmployeeRequestPrimaryAcceptionId == 1 || item.FldEmployeeRequestPrimaryAcceptionId == null)
                    {
                        <a href="#" class="btn btn-success w-100" onclick="AskAccept(@item.FldEmployeeRequestInterviewSessionId);">تایید کاربر</a>
                        <a href="#" class="btn btn-danger w-100" onclick="AskDeny(@item.FldEmployeeRequestInterviewSessionId);">رد کاربر</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@section Botton {
    <a class="btn btn-danger rounded-circle" asp-page="../Panel/Index"><i class="fa fa-arrow-circle-left"></i></a>
}

@section Scripts {
    <script src="~/lib/sweetalert/sweetalert2.10.js"></script>
    <script>
        function AskAccept(id) {
            Swal.fire({
                title: 'کاربر تایید شود؟',
                showDenyButton: true,
                confirmButtonText: `بله`,
                denyButtonText: `خیر`,
            }).then((result) => {
                if (result.isConfirmed) {
                    var xmlHttp = new XMLHttpRequest();
                    xmlHttp.open("GET", "?id=" + id + "&handler=Accept", false);
                    xmlHttp.send(null);
                    Swal.fire('کاربر تایید شد', '', 'success').then(() => {
                        location.reload();
                    })
                }
            });
        }

        function AskDeny(id) {
            Swal.fire({
                title: 'کاربر رد شود؟',
                showDenyButton: true,
                confirmButtonText: `بله`,
                denyButtonText: `خیر`,
            }).then((result) => {
                if (result.isConfirmed) {
                    var xmlHttp = new XMLHttpRequest();
                    xmlHttp.open("GET", "?id=" + id + "&handler=Deny", false);
                    xmlHttp.send(null);
                    Swal.fire('کاربر رد شد', '', 'success').then(() => {
                        location.reload();
                    })
                }
            });
        }

        async function AskPoint(id, max, eid) {
            const { value: point } = await Swal.fire({
                input: 'text',
                inputLabel: 'نمره',
                inputPlaceholder: 'نمره را وارد کنید',
                showCancelButton: true,
                confirmButtonText: `تایید`,
                cancelButtonText: `انصراف`,
            })
            if (point) {
                if (point > max) {
                    Swal.fire('مقدار وارد شده از حداکثر نمره بیشتر میباشد', '', 'error').then(() => {
                        location.reload();
                    })
                    return false;
                }
                var xmlHttp = new XMLHttpRequest();
                xmlHttp.open("GET", "?id=" + id + "&point=" + point + "&eid=" + eid + "&handler=Point", false);
                xmlHttp.send(null);
                Swal.fire('نمره ثبت شد', '', 'success').then(() => {
                    location.reload();
                })
            }
        }
    </script>
}